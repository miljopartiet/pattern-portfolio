/*
 * Natural Sort algorithm for Javascript - Version 0.6 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 * Contributors: Mike Grier (mgrier.com), Clint Priest, Kyle Adams, guillermo
 */
function naturalSort(e,t){var n=/(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,r=/(^[ ]*|[ ]*$)/g,i=/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,s=/^0x[0-9a-f]+$/i,o=/^0/,u=e.toString().replace(r,"")||"",a=t.toString().replace(r,"")||"",f=u.replace(n,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),l=a.replace(n,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),c=parseInt(u.match(s))||f.length!=1&&u.match(i)&&Date.parse(u),h=parseInt(a.match(s))||c&&a.match(i)&&Date.parse(a)||null;if(h){if(c<h)return-1;if(c>h)return 1}for(var p=0,d=Math.max(f.length,l.length);p<d;p++){oFxNcL=!(f[p]||"").match(o)&&parseFloat(f[p])||f[p]||0,oFyNcL=!(l[p]||"").match(o)&&parseFloat(l[p])||l[p]||0;if(isNaN(oFxNcL)!==isNaN(oFyNcL))return isNaN(oFxNcL)?1:-1;typeof oFxNcL!=typeof oFyNcL&&(oFxNcL+="",oFyNcL+="");if(oFxNcL<oFyNcL)return-1;if(oFxNcL>oFyNcL)return 1}return 0};